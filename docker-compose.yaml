version: "3.9"

services:
  traefik:
    image: traefik:v3.2
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=admin@admin.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - frontend-network
      - backend

  postgres:
    image: postgres:latest
    env_file:
      - ./docker/postgres.env
    ports:
      - "5432:5432"
    environment:
      TZ: "Europe/Paris"
    restart: unless-stopped
    volumes:
      - data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    ports:
      - "5050:80"
    env_file:
      - ./docker/pgadmin.env
    environment:
      TZ: "Europe/Paris"
    volumes:
      - ./docker/pgadmin_servers.json:/pgadmin4/servers.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls=true"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
    networks:
      - backend
    depends_on:
      - postgres

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.dockerfile
    hostname: backend
    env_file: ./docker/backend.env
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
    networks:
      - backend
      - frontend-network
    depends_on:
      - postgres

  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.dockerfile
    hostname: frontend
    env_file: ./docker/frontend.env
    ports:
      - "8080:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    networks:
      - frontend-network
    depends_on:
      - backend

networks:
  backend:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  data:
